name: Install Kubernetes and Galaxy
description: "Set up a Galaxy instance to use for testing tools and workflows"

on:
  workflow_call:
    inputs:
      playbook-repo:
        description: 'Playbook repository. Just include the org and repo name'
        type: string
        default: 'galaxyproject/galaxy-k8s-boot'
        required: false
      playbook-branch:
        description: 'Branch of the playbook repository to use. This should point to a stable tag and not a moving branch like master or main.'
        default: 'master'
        type: string
        required: false
      reserved-cores:
        description: 'Number of cores to reserve for the system'
        default: 2
        type: number
        required: false
      reserved-mem-gb:
        description: 'Amount of memory to reserve for the system in GB'
        default: 6
        type: number
        required: false
      api-key:
        description: 'API key to use for the Galaxy instance'
        default: changeme
        type: string
        required: true
      values_file:
        description: 'Values file to use for the Galaxy Helm chart'
        type: string
        required: false

env:
  RESERVED_CORES: ${{ inputs.reserved-cores }}
  RESERVED_MEM_GB: ${{ inputs.reserved-mem-gb }}

jobs:
  run:
    name: Install Kubernetes and Galaxy
    runs-on: ubuntu-latest
    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Ansible
      run: pip install ansible

    - name: Install the playbook
      shell: bash
      run: |
        git clone https://github.com/${{ inputs.playbook-repo }} --branch ${{ inputs.playbook-branch }} playbook
#      uses: actions/checkout@v4
#      with:
#        repository: ${{ inputs.playbook-repo }}
#        ref: ${{ inputs.playbook-branch }}

    - name: Restore the values after checking out the playbook
      if: ${{ inputs.values_file != ''}}
      run: cp ${{ inputs.values_file }} playbook/values/accp.yml

    - name: Calculate the number of cores and memory available
      id: values
      run: |
        echo "cores=$(($(nproc) - ${{ inputs.reserved-cores }} ))" >> $GITHUB_OUTPUT
        echo "memory=$(($(free -m | awk '/^Mem:/{print $2}') - ${{ inputs.reserved-mem-gb }} ))" >> $GITHUB_OUTPUT

    - name: Run the playbook
      shell: bash
#      if: ${{ inputs.values_file == ''}}
      run: |
        cd playbook
        cat inventories/localhost.template | sed "s/__HOST__/$(curl -s ifconfig.me)/" | sed "s/__USER__/$USER/" > inventories/localhost
        ansible-playbook -i inventories/localhost playbook.yml -e "job_max_cores=${{ steps.values.outputs.cores }}" -e "job_max_mem=${{ steps.values.outputs.memory }}" -e "application=galaxy" -e "galaxy_api_key=${{ steps.api-key.outputs.key }}"

#    - name: Run the playbook with optional values
#      shell: bash
#      if: ${{ inputs.values_file != ''}}
#      run: |
#        pwd
#        ls -al
#        ls -al ../
#        ls -al ../../
#        cp ${{ inputs.values_file }} values
#        cat inventories/localhost.template | sed "s/__HOST__/$(curl -s ifconfig.me)/" | sed "s/__USER__/$USER/" > inventories/localhost
#        ansible-playbook -i inventories/localhost playbook.yml -e "job_max_cores=${{ steps.values.outputs.cores }}" -e "job_max_mem=${{ steps.values.outputs.memory }}" -e "application=galaxy" -e "galaxy_api_key=${{ steps.api-key.outputs.key }}" -e "chart_values_file=${{ inputs.values_file }}"

#    - name: Run the playbook
#      shell: bash
#      run: |
#        cat inventories/localhost.template | sed "s/__HOST__/$(curl -s ifconfig.me)/" | sed "s/__USER__/$USER/" > inventories/localhost
#        cat inventories/localhost
#        ansible-playbook -i inventories/localhost playbook.yml --extra-vars "job_max_cores=$(($(nproc) - $RESERVED_CORES))" --extra-vars "job_max_mem=$(($(free -m | awk '/^Mem:/{print $2}') - $RESERVED_MEM_GB))" --extra-vars "application=galaxy" --extra-vars "galaxy_api_key=${{ steps.api-key.outputs.key }}"

    - name: Check the nodes
      run: |
        sudo kubectl get nodes
        sudo kubectl get pods -A
        sudo kubectl describe nodes

    - name: Wait for deployments to rollout
      shell: bash
      run: |
        echo "Waiting for the deployments."
        for deployment in $(sudo kubectl get deployment -n galaxy -o json | jq -r .items[].metadata.name) ; do \
          sudo kubectl rollout status deployment $deployment -n galaxy --watch ; \
        done

    - name: Check the pods again
      shell: bash
      run: |
        echo "*** Node status ***"
        sudo kubectl describe nodes
        echo "*** Pod status ***"
        sudo kubectl get pods -A

    - name: Get the Galaxy version
      run: curl -s http://localhost/api/version | jq

  
